import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchPositions } from './positionsAPI';

const initialState = {
    items: [],
    status: 'idle',
    isLoading: false
};

function startLoading(state) {
    state.isLoading = true;
}

function loadingFailed(state, action) {
    state.isLoading = false;
    state.error = action.payload;
}
export const positionsSlice = createSlice({
    name: 'positions',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        getPositionsStart: startLoading,
        getPositionsSuccess: (state, action) => {
            state.isLoading = false;
            state.error = null;
            state.items = action.payload;
        },
        getPositionsFailure: loadingFailed,
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        // builder
        //     .addCase(incrementAsync.pending, (state) => {
        //         state.status = 'loading';
        //     })
        //     .addCase(incrementAsync.fulfilled, (state, action) => {
        //         state.status = 'idle';
        //         state.value += action.payload;
        //     });
    },
});

export const getPositions = () => async (dispatch, getState) => {
    try {
        dispatch(getPositionsStart());
        const results = await fetchPositions();
        dispatch(getPositionsSuccess(results.data));
        return results.data;
    } catch (ex) {
        dispatch(getPositionsFailure(ex.toString()));
    }
};

export const { getPositionsStart, getPositionsSuccess, getPositionsFailure } = positionsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.positions.value)`
// export const selectCount = (state) => state.positions.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//         dispatch(incrementByAmount(amount));
//     }
// };

export default positionsSlice.reducer;
